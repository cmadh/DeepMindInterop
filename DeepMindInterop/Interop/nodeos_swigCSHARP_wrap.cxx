/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_NodeosSwigModule(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_NodeosSwigModule(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_NodeosSwigModule(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#include "nodeos_swig.hpp"


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "nodeos_swigCSHARP_wrap.h"

SwigDirector_SwigLoggerBase::SwigDirector_SwigLoggerBase() : swig_logger_base(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_SwigLoggerBase::~SwigDirector_SwigLoggerBase() {
  
}


void SwigDirector_SwigLoggerBase::on_deep_mind_version(std::string name, uint32_t major, uint32_t minor) {
  char * jname  ;
  unsigned int jmajor  ;
  unsigned int jminor  ;
  
  if (!swig_callbackon_deep_mind_version) {
    swig_logger_base::on_deep_mind_version(name,major,minor);
    return;
  } else {
    jname = SWIG_csharp_string_callback((&name)->c_str()); 
    jmajor = major;
    jminor = minor;
    swig_callbackon_deep_mind_version(jname, jmajor, jminor);
  }
}

void SwigDirector_SwigLoggerBase::on_abidump_start(uint32_t block_num, uint64_t global_sequence_num) {
  unsigned int jblock_num  ;
  unsigned long long jglobal_sequence_num  ;
  
  if (!swig_callbackon_abidump_start) {
    swig_logger_base::on_abidump_start(block_num,global_sequence_num);
    return;
  } else {
    jblock_num = block_num;
    jglobal_sequence_num = global_sequence_num;
    swig_callbackon_abidump_start(jblock_num, jglobal_sequence_num);
  }
}

void SwigDirector_SwigLoggerBase::on_abidump_abi(uint64_t name, swig_data_wrapper abi_data) {
  unsigned long long jname  ;
  void * jabi_data  ;
  
  if (!swig_callbackon_abidump_abi) {
    swig_logger_base::on_abidump_abi(name,abi_data);
    return;
  } else {
    jname = name;
    jabi_data = (void *)new swig_data_wrapper((const swig_data_wrapper &)abi_data); 
    swig_callbackon_abidump_abi(jname, jabi_data);
  }
}

void SwigDirector_SwigLoggerBase::on_abidump_end() {
  if (!swig_callbackon_abidump_end) {
    swig_logger_base::on_abidump_end();
    return;
  } else {
    swig_callbackon_abidump_end();
  }
}

void SwigDirector_SwigLoggerBase::on_start_block(uint32_t start_block) {
  unsigned int jstart_block  ;
  
  if (!swig_callbackon_start_block) {
    swig_logger_base::on_start_block(start_block);
    return;
  } else {
    jstart_block = start_block;
    swig_callbackon_start_block(jstart_block);
  }
}

void SwigDirector_SwigLoggerBase::on_accepted_block(uint32_t num, swig_data_wrapper blk) {
  unsigned int jnum  ;
  void * jblk  ;
  
  if (!swig_callbackon_accepted_block) {
    swig_logger_base::on_accepted_block(num,blk);
    return;
  } else {
    jnum = num;
    jblk = (void *)new swig_data_wrapper((const swig_data_wrapper &)blk); 
    swig_callbackon_accepted_block(jnum, jblk);
  }
}

void SwigDirector_SwigLoggerBase::on_switch_forks(swig_data_wrapper from_id, swig_data_wrapper to_id) {
  void * jfrom_id  ;
  void * jto_id  ;
  
  if (!swig_callbackon_switch_forks) {
    swig_logger_base::on_switch_forks(from_id,to_id);
    return;
  } else {
    jfrom_id = (void *)new swig_data_wrapper((const swig_data_wrapper &)from_id); 
    jto_id = (void *)new swig_data_wrapper((const swig_data_wrapper &)to_id); 
    swig_callbackon_switch_forks(jfrom_id, jto_id);
  }
}

void SwigDirector_SwigLoggerBase::on_error(swig_data_wrapper id, swig_data_wrapper trx) {
  void * jid  ;
  void * jtrx  ;
  
  if (!swig_callbackon_error) {
    swig_logger_base::on_error(id,trx);
    return;
  } else {
    jid = (void *)new swig_data_wrapper((const swig_data_wrapper &)id); 
    jtrx = (void *)new swig_data_wrapper((const swig_data_wrapper &)trx); 
    swig_callbackon_error(jid, jtrx);
  }
}

void SwigDirector_SwigLoggerBase::on_onblock(swig_data_wrapper id, swig_data_wrapper trx) {
  void * jid  ;
  void * jtrx  ;
  
  if (!swig_callbackon_onblock) {
    swig_logger_base::on_onblock(id,trx);
    return;
  } else {
    jid = (void *)new swig_data_wrapper((const swig_data_wrapper &)id); 
    jtrx = (void *)new swig_data_wrapper((const swig_data_wrapper &)trx); 
    swig_callbackon_onblock(jid, jtrx);
  }
}

void SwigDirector_SwigLoggerBase::on_applied_transaction(uint32_t block_num, swig_data_wrapper traces) {
  unsigned int jblock_num  ;
  void * jtraces  ;
  
  if (!swig_callbackon_applied_transaction) {
    swig_logger_base::on_applied_transaction(block_num,traces);
    return;
  } else {
    jblock_num = block_num;
    jtraces = (void *)new swig_data_wrapper((const swig_data_wrapper &)traces); 
    swig_callbackon_applied_transaction(jblock_num, jtraces);
  }
}

void SwigDirector_SwigLoggerBase::on_add_ram_correction(uint32_t action_id, int64_t correction_id, std::string event_id, uint64_t payer, uint64_t delta) {
  unsigned int jaction_id  ;
  long long jcorrection_id  ;
  char * jevent_id  ;
  unsigned long long jpayer  ;
  unsigned long long jdelta  ;
  
  if (!swig_callbackon_add_ram_correction) {
    swig_logger_base::on_add_ram_correction(action_id,correction_id,event_id,payer,delta);
    return;
  } else {
    jaction_id = action_id;
    jcorrection_id = correction_id;
    jevent_id = SWIG_csharp_string_callback((&event_id)->c_str()); 
    jpayer = payer;
    jdelta = delta;
    swig_callbackon_add_ram_correction(jaction_id, jcorrection_id, jevent_id, jpayer, jdelta);
  }
}

void SwigDirector_SwigLoggerBase::on_input_action(uint32_t action_id) {
  unsigned int jaction_id  ;
  
  if (!swig_callbackon_input_action) {
    swig_logger_base::on_input_action(action_id);
    return;
  } else {
    jaction_id = action_id;
    swig_callbackon_input_action(jaction_id);
  }
}

void SwigDirector_SwigLoggerBase::on_require_recipient(uint32_t action_id) {
  unsigned int jaction_id  ;
  
  if (!swig_callbackon_require_recipient) {
    swig_logger_base::on_require_recipient(action_id);
    return;
  } else {
    jaction_id = action_id;
    swig_callbackon_require_recipient(jaction_id);
  }
}

void SwigDirector_SwigLoggerBase::on_send_inline(uint32_t action_id) {
  unsigned int jaction_id  ;
  
  if (!swig_callbackon_send_inline) {
    swig_logger_base::on_send_inline(action_id);
    return;
  } else {
    jaction_id = action_id;
    swig_callbackon_send_inline(jaction_id);
  }
}

void SwigDirector_SwigLoggerBase::on_send_context_free_inline(uint32_t action_id) {
  unsigned int jaction_id  ;
  
  if (!swig_callbackon_send_context_free_inline) {
    swig_logger_base::on_send_context_free_inline(action_id);
    return;
  } else {
    jaction_id = action_id;
    swig_callbackon_send_context_free_inline(jaction_id);
  }
}

void SwigDirector_SwigLoggerBase::on_cancel_deferred(uint8_t qual, uint32_t action_id, uint64_t sender, swig_data_wrapper sender_id, uint64_t payer, uint32_t published, uint32_t delay, uint32_t expiration, swig_data_wrapper trx_id, swig_data_wrapper trx) {
  unsigned char jqual  ;
  unsigned int jaction_id  ;
  unsigned long long jsender  ;
  void * jsender_id  ;
  unsigned long long jpayer  ;
  unsigned int jpublished  ;
  unsigned int jdelay  ;
  unsigned int jexpiration  ;
  void * jtrx_id  ;
  void * jtrx  ;
  
  if (!swig_callbackon_cancel_deferred) {
    swig_logger_base::on_cancel_deferred(qual,action_id,sender,sender_id,payer,published,delay,expiration,trx_id,trx);
    return;
  } else {
    jqual = qual;
    jaction_id = action_id;
    jsender = sender;
    jsender_id = (void *)new swig_data_wrapper((const swig_data_wrapper &)sender_id); 
    jpayer = payer;
    jpublished = published;
    jdelay = delay;
    jexpiration = expiration;
    jtrx_id = (void *)new swig_data_wrapper((const swig_data_wrapper &)trx_id); 
    jtrx = (void *)new swig_data_wrapper((const swig_data_wrapper &)trx); 
    swig_callbackon_cancel_deferred(jqual, jaction_id, jsender, jsender_id, jpayer, jpublished, jdelay, jexpiration, jtrx_id, jtrx);
  }
}

void SwigDirector_SwigLoggerBase::on_send_deferred(uint8_t qual, uint32_t action_id, uint64_t sender, swig_data_wrapper sender_id, uint64_t payer, uint32_t published, uint32_t delay, uint32_t expiration, swig_data_wrapper trx_id, swig_data_wrapper trx) {
  unsigned char jqual  ;
  unsigned int jaction_id  ;
  unsigned long long jsender  ;
  void * jsender_id  ;
  unsigned long long jpayer  ;
  unsigned int jpublished  ;
  unsigned int jdelay  ;
  unsigned int jexpiration  ;
  void * jtrx_id  ;
  void * jtrx  ;
  
  if (!swig_callbackon_send_deferred) {
    swig_logger_base::on_send_deferred(qual,action_id,sender,sender_id,payer,published,delay,expiration,trx_id,trx);
    return;
  } else {
    jqual = qual;
    jaction_id = action_id;
    jsender = sender;
    jsender_id = (void *)new swig_data_wrapper((const swig_data_wrapper &)sender_id); 
    jpayer = payer;
    jpublished = published;
    jdelay = delay;
    jexpiration = expiration;
    jtrx_id = (void *)new swig_data_wrapper((const swig_data_wrapper &)trx_id); 
    jtrx = (void *)new swig_data_wrapper((const swig_data_wrapper &)trx); 
    swig_callbackon_send_deferred(jqual, jaction_id, jsender, jsender_id, jpayer, jpublished, jdelay, jexpiration, jtrx_id, jtrx);
  }
}

void SwigDirector_SwigLoggerBase::on_create_deferred(uint8_t qual, uint32_t action_id, uint64_t sender, swig_data_wrapper sender_id, uint64_t payer, uint32_t published, uint32_t delay, uint32_t expiration, swig_data_wrapper trx_id, swig_data_wrapper trx) {
  unsigned char jqual  ;
  unsigned int jaction_id  ;
  unsigned long long jsender  ;
  void * jsender_id  ;
  unsigned long long jpayer  ;
  unsigned int jpublished  ;
  unsigned int jdelay  ;
  unsigned int jexpiration  ;
  void * jtrx_id  ;
  void * jtrx  ;
  
  if (!swig_callbackon_create_deferred) {
    swig_logger_base::on_create_deferred(qual,action_id,sender,sender_id,payer,published,delay,expiration,trx_id,trx);
    return;
  } else {
    jqual = qual;
    jaction_id = action_id;
    jsender = sender;
    jsender_id = (void *)new swig_data_wrapper((const swig_data_wrapper &)sender_id); 
    jpayer = payer;
    jpublished = published;
    jdelay = delay;
    jexpiration = expiration;
    jtrx_id = (void *)new swig_data_wrapper((const swig_data_wrapper &)trx_id); 
    jtrx = (void *)new swig_data_wrapper((const swig_data_wrapper &)trx); 
    swig_callbackon_create_deferred(jqual, jaction_id, jsender, jsender_id, jpayer, jpublished, jdelay, jexpiration, jtrx_id, jtrx);
  }
}

void SwigDirector_SwigLoggerBase::on_fail_deferred(uint32_t action_id) {
  unsigned int jaction_id  ;
  
  if (!swig_callbackon_fail_deferred) {
    swig_logger_base::on_fail_deferred(action_id);
    return;
  } else {
    jaction_id = action_id;
    swig_callbackon_fail_deferred(jaction_id);
  }
}

void SwigDirector_SwigLoggerBase::on_create_table(uint32_t action_id, uint64_t code, uint64_t scope, uint64_t table, uint64_t payer) {
  unsigned int jaction_id  ;
  unsigned long long jcode  ;
  unsigned long long jscope  ;
  unsigned long long jtable  ;
  unsigned long long jpayer  ;
  
  if (!swig_callbackon_create_table) {
    swig_logger_base::on_create_table(action_id,code,scope,table,payer);
    return;
  } else {
    jaction_id = action_id;
    jcode = code;
    jscope = scope;
    jtable = table;
    jpayer = payer;
    swig_callbackon_create_table(jaction_id, jcode, jscope, jtable, jpayer);
  }
}

void SwigDirector_SwigLoggerBase::on_remove_table(uint32_t action_id, uint64_t code, uint64_t scope, uint64_t table, uint64_t payer) {
  unsigned int jaction_id  ;
  unsigned long long jcode  ;
  unsigned long long jscope  ;
  unsigned long long jtable  ;
  unsigned long long jpayer  ;
  
  if (!swig_callbackon_remove_table) {
    swig_logger_base::on_remove_table(action_id,code,scope,table,payer);
    return;
  } else {
    jaction_id = action_id;
    jcode = code;
    jscope = scope;
    jtable = table;
    jpayer = payer;
    swig_callbackon_remove_table(jaction_id, jcode, jscope, jtable, jpayer);
  }
}

void SwigDirector_SwigLoggerBase::on_db_store_i64(uint32_t action_id, uint64_t payer, uint64_t table_code, uint64_t scope, uint64_t table_name, uint64_t primkey, swig_data_wrapper ndata) {
  unsigned int jaction_id  ;
  unsigned long long jpayer  ;
  unsigned long long jtable_code  ;
  unsigned long long jscope  ;
  unsigned long long jtable_name  ;
  unsigned long long jprimkey  ;
  void * jndata  ;
  
  if (!swig_callbackon_db_store_i64) {
    swig_logger_base::on_db_store_i64(action_id,payer,table_code,scope,table_name,primkey,ndata);
    return;
  } else {
    jaction_id = action_id;
    jpayer = payer;
    jtable_code = table_code;
    jscope = scope;
    jtable_name = table_name;
    jprimkey = primkey;
    jndata = (void *)new swig_data_wrapper((const swig_data_wrapper &)ndata); 
    swig_callbackon_db_store_i64(jaction_id, jpayer, jtable_code, jscope, jtable_name, jprimkey, jndata);
  }
}

void SwigDirector_SwigLoggerBase::on_db_update_i64(uint32_t action_id, uint64_t payer, uint64_t table_code, uint64_t scope, uint64_t table_name, uint64_t primkey, swig_data_wrapper odata, swig_data_wrapper ndata) {
  unsigned int jaction_id  ;
  unsigned long long jpayer  ;
  unsigned long long jtable_code  ;
  unsigned long long jscope  ;
  unsigned long long jtable_name  ;
  unsigned long long jprimkey  ;
  void * jodata  ;
  void * jndata  ;
  
  if (!swig_callbackon_db_update_i64) {
    swig_logger_base::on_db_update_i64(action_id,payer,table_code,scope,table_name,primkey,odata,ndata);
    return;
  } else {
    jaction_id = action_id;
    jpayer = payer;
    jtable_code = table_code;
    jscope = scope;
    jtable_name = table_name;
    jprimkey = primkey;
    jodata = (void *)new swig_data_wrapper((const swig_data_wrapper &)odata); 
    jndata = (void *)new swig_data_wrapper((const swig_data_wrapper &)ndata); 
    swig_callbackon_db_update_i64(jaction_id, jpayer, jtable_code, jscope, jtable_name, jprimkey, jodata, jndata);
  }
}

void SwigDirector_SwigLoggerBase::on_db_remove_i64(uint32_t action_id, uint64_t payer, uint64_t table_code, uint64_t scope, uint64_t table_name, uint64_t primkey, swig_data_wrapper odata) {
  unsigned int jaction_id  ;
  unsigned long long jpayer  ;
  unsigned long long jtable_code  ;
  unsigned long long jscope  ;
  unsigned long long jtable_name  ;
  unsigned long long jprimkey  ;
  void * jodata  ;
  
  if (!swig_callbackon_db_remove_i64) {
    swig_logger_base::on_db_remove_i64(action_id,payer,table_code,scope,table_name,primkey,odata);
    return;
  } else {
    jaction_id = action_id;
    jpayer = payer;
    jtable_code = table_code;
    jscope = scope;
    jtable_name = table_name;
    jprimkey = primkey;
    jodata = (void *)new swig_data_wrapper((const swig_data_wrapper &)odata); 
    swig_callbackon_db_remove_i64(jaction_id, jpayer, jtable_code, jscope, jtable_name, jprimkey, jodata);
  }
}

void SwigDirector_SwigLoggerBase::on_ram_event(uint32_t action_id, std::string event_id, std::string family, std::string operation, std::string legacy_tag, uint64_t payer, uint64_t new_usage, int64_t delta) {
  unsigned int jaction_id  ;
  char * jevent_id  ;
  char * jfamily  ;
  char * joperation  ;
  char * jlegacy_tag  ;
  unsigned long long jpayer  ;
  unsigned long long jnew_usage  ;
  long long jdelta  ;
  
  if (!swig_callbackon_ram_event) {
    swig_logger_base::on_ram_event(action_id,event_id,family,operation,legacy_tag,payer,new_usage,delta);
    return;
  } else {
    jaction_id = action_id;
    jevent_id = SWIG_csharp_string_callback((&event_id)->c_str()); 
    jfamily = SWIG_csharp_string_callback((&family)->c_str()); 
    joperation = SWIG_csharp_string_callback((&operation)->c_str()); 
    jlegacy_tag = SWIG_csharp_string_callback((&legacy_tag)->c_str()); 
    jpayer = payer;
    jnew_usage = new_usage;
    jdelta = delta;
    swig_callbackon_ram_event(jaction_id, jevent_id, jfamily, joperation, jlegacy_tag, jpayer, jnew_usage, jdelta);
  }
}

void SwigDirector_SwigLoggerBase::on_create_permission(uint32_t action_id, int64_t permission_id, swig_data_wrapper data) {
  unsigned int jaction_id  ;
  long long jpermission_id  ;
  void * jdata  ;
  
  if (!swig_callbackon_create_permission) {
    swig_logger_base::on_create_permission(action_id,permission_id,data);
    return;
  } else {
    jaction_id = action_id;
    jpermission_id = permission_id;
    jdata = (void *)new swig_data_wrapper((const swig_data_wrapper &)data); 
    swig_callbackon_create_permission(jaction_id, jpermission_id, jdata);
  }
}

void SwigDirector_SwigLoggerBase::on_modify_permission(uint32_t action_id, int64_t permission_id, swig_data_wrapper opdata, swig_data_wrapper npdata) {
  unsigned int jaction_id  ;
  long long jpermission_id  ;
  void * jopdata  ;
  void * jnpdata  ;
  
  if (!swig_callbackon_modify_permission) {
    swig_logger_base::on_modify_permission(action_id,permission_id,opdata,npdata);
    return;
  } else {
    jaction_id = action_id;
    jpermission_id = permission_id;
    jopdata = (void *)new swig_data_wrapper((const swig_data_wrapper &)opdata); 
    jnpdata = (void *)new swig_data_wrapper((const swig_data_wrapper &)npdata); 
    swig_callbackon_modify_permission(jaction_id, jpermission_id, jopdata, jnpdata);
  }
}

void SwigDirector_SwigLoggerBase::on_remove_permission(uint32_t action_id, int64_t permission_id, swig_data_wrapper data) {
  unsigned int jaction_id  ;
  long long jpermission_id  ;
  void * jdata  ;
  
  if (!swig_callbackon_remove_permission) {
    swig_logger_base::on_remove_permission(action_id,permission_id,data);
    return;
  } else {
    jaction_id = action_id;
    jpermission_id = permission_id;
    jdata = (void *)new swig_data_wrapper((const swig_data_wrapper &)data); 
    swig_callbackon_remove_permission(jaction_id, jpermission_id, jdata);
  }
}

void SwigDirector_SwigLoggerBase::swig_connect_director(SWIG_Callback0_t callbackon_deep_mind_version, SWIG_Callback1_t callbackon_abidump_start, SWIG_Callback2_t callbackon_abidump_abi, SWIG_Callback3_t callbackon_abidump_end, SWIG_Callback4_t callbackon_start_block, SWIG_Callback5_t callbackon_accepted_block, SWIG_Callback6_t callbackon_switch_forks, SWIG_Callback7_t callbackon_error, SWIG_Callback8_t callbackon_onblock, SWIG_Callback9_t callbackon_applied_transaction, SWIG_Callback10_t callbackon_add_ram_correction, SWIG_Callback11_t callbackon_input_action, SWIG_Callback12_t callbackon_require_recipient, SWIG_Callback13_t callbackon_send_inline, SWIG_Callback14_t callbackon_send_context_free_inline, SWIG_Callback15_t callbackon_cancel_deferred, SWIG_Callback16_t callbackon_send_deferred, SWIG_Callback17_t callbackon_create_deferred, SWIG_Callback18_t callbackon_fail_deferred, SWIG_Callback19_t callbackon_create_table, SWIG_Callback20_t callbackon_remove_table, SWIG_Callback21_t callbackon_db_store_i64, SWIG_Callback22_t callbackon_db_update_i64, SWIG_Callback23_t callbackon_db_remove_i64, SWIG_Callback24_t callbackon_ram_event, SWIG_Callback25_t callbackon_create_permission, SWIG_Callback26_t callbackon_modify_permission, SWIG_Callback27_t callbackon_remove_permission) {
  swig_callbackon_deep_mind_version = callbackon_deep_mind_version;
  swig_callbackon_abidump_start = callbackon_abidump_start;
  swig_callbackon_abidump_abi = callbackon_abidump_abi;
  swig_callbackon_abidump_end = callbackon_abidump_end;
  swig_callbackon_start_block = callbackon_start_block;
  swig_callbackon_accepted_block = callbackon_accepted_block;
  swig_callbackon_switch_forks = callbackon_switch_forks;
  swig_callbackon_error = callbackon_error;
  swig_callbackon_onblock = callbackon_onblock;
  swig_callbackon_applied_transaction = callbackon_applied_transaction;
  swig_callbackon_add_ram_correction = callbackon_add_ram_correction;
  swig_callbackon_input_action = callbackon_input_action;
  swig_callbackon_require_recipient = callbackon_require_recipient;
  swig_callbackon_send_inline = callbackon_send_inline;
  swig_callbackon_send_context_free_inline = callbackon_send_context_free_inline;
  swig_callbackon_cancel_deferred = callbackon_cancel_deferred;
  swig_callbackon_send_deferred = callbackon_send_deferred;
  swig_callbackon_create_deferred = callbackon_create_deferred;
  swig_callbackon_fail_deferred = callbackon_fail_deferred;
  swig_callbackon_create_table = callbackon_create_table;
  swig_callbackon_remove_table = callbackon_remove_table;
  swig_callbackon_db_store_i64 = callbackon_db_store_i64;
  swig_callbackon_db_update_i64 = callbackon_db_update_i64;
  swig_callbackon_db_remove_i64 = callbackon_db_remove_i64;
  swig_callbackon_ram_event = callbackon_ram_event;
  swig_callbackon_create_permission = callbackon_create_permission;
  swig_callbackon_modify_permission = callbackon_modify_permission;
  swig_callbackon_remove_permission = callbackon_remove_permission;
}

void SwigDirector_SwigLoggerBase::swig_init_callbacks() {
  swig_callbackon_deep_mind_version = 0;
  swig_callbackon_abidump_start = 0;
  swig_callbackon_abidump_abi = 0;
  swig_callbackon_abidump_end = 0;
  swig_callbackon_start_block = 0;
  swig_callbackon_accepted_block = 0;
  swig_callbackon_switch_forks = 0;
  swig_callbackon_error = 0;
  swig_callbackon_onblock = 0;
  swig_callbackon_applied_transaction = 0;
  swig_callbackon_add_ram_correction = 0;
  swig_callbackon_input_action = 0;
  swig_callbackon_require_recipient = 0;
  swig_callbackon_send_inline = 0;
  swig_callbackon_send_context_free_inline = 0;
  swig_callbackon_cancel_deferred = 0;
  swig_callbackon_send_deferred = 0;
  swig_callbackon_create_deferred = 0;
  swig_callbackon_fail_deferred = 0;
  swig_callbackon_create_table = 0;
  swig_callbackon_remove_table = 0;
  swig_callbackon_db_store_i64 = 0;
  swig_callbackon_db_update_i64 = 0;
  swig_callbackon_db_remove_i64 = 0;
  swig_callbackon_ram_event = 0;
  swig_callbackon_create_permission = 0;
  swig_callbackon_modify_permission = 0;
  swig_callbackon_remove_permission = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_SwigDataWrapper_data_set(void * jarg1, void * jarg2) {
  swig_data_wrapper *arg1 = (swig_data_wrapper *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (swig_data_wrapper *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwigDataWrapper_data_get(void * jarg1) {
  void * jresult ;
  swig_data_wrapper *arg1 = (swig_data_wrapper *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (swig_data_wrapper *)jarg1; 
  result = (uint8_t *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigDataWrapper_size_set(void * jarg1, int jarg2) {
  swig_data_wrapper *arg1 = (swig_data_wrapper *) 0 ;
  int32_t arg2 ;
  
  arg1 = (swig_data_wrapper *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SwigDataWrapper_size_get(void * jarg1) {
  int jresult ;
  swig_data_wrapper *arg1 = (swig_data_wrapper *) 0 ;
  int32_t result;
  
  arg1 = (swig_data_wrapper *)jarg1; 
  result = (int32_t) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SwigDataWrapper(char * jarg1, unsigned long jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  swig_data_wrapper *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (swig_data_wrapper *)new swig_data_wrapper((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SwigDataWrapper(void * jarg1) {
  swig_data_wrapper *arg1 = (swig_data_wrapper *) 0 ;
  
  arg1 = (swig_data_wrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SwigLoggerBase(void * jarg1) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_deep_mind_version(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  std::string arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  (arg1)->on_deep_mind_version(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_deep_mind_versionSwigExplicitSwigLoggerBase(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  std::string arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  (arg1)->swig_logger_base::on_deep_mind_version(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_abidump_start(void * jarg1, unsigned int jarg2, unsigned long long jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  (arg1)->on_abidump_start(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_abidump_startSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, unsigned long long jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  (arg1)->swig_logger_base::on_abidump_start(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_abidump_abi(void * jarg1, unsigned long long jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint64_t arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->on_abidump_abi(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_abidump_abiSwigExplicitSwigLoggerBase(void * jarg1, unsigned long long jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint64_t arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->swig_logger_base::on_abidump_abi(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_abidump_end(void * jarg1) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  (arg1)->on_abidump_end();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_abidump_endSwigExplicitSwigLoggerBase(void * jarg1) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  (arg1)->swig_logger_base::on_abidump_end();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_start_block(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->on_start_block(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_start_blockSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->swig_logger_base::on_start_block(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_accepted_block(void * jarg1, unsigned int jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->on_accepted_block(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_accepted_blockSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->swig_logger_base::on_accepted_block(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_switch_forks(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  SwigValueWrapper< swig_data_wrapper > arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp2 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (swig_data_wrapper *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->on_switch_forks(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_switch_forksSwigExplicitSwigLoggerBase(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  SwigValueWrapper< swig_data_wrapper > arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp2 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (swig_data_wrapper *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->swig_logger_base::on_switch_forks(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_error(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  SwigValueWrapper< swig_data_wrapper > arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp2 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (swig_data_wrapper *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->on_error(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_errorSwigExplicitSwigLoggerBase(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  SwigValueWrapper< swig_data_wrapper > arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp2 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (swig_data_wrapper *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->swig_logger_base::on_error(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_onblock(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  SwigValueWrapper< swig_data_wrapper > arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp2 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (swig_data_wrapper *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->on_onblock(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_onblockSwigExplicitSwigLoggerBase(void * jarg1, void * jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  SwigValueWrapper< swig_data_wrapper > arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp2 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  argp2 = (swig_data_wrapper *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->swig_logger_base::on_onblock(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_applied_transaction(void * jarg1, unsigned int jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->on_applied_transaction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_applied_transactionSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, void * jarg3) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  SwigValueWrapper< swig_data_wrapper > arg3 ;
  swig_data_wrapper *argp3 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  argp3 = (swig_data_wrapper *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->swig_logger_base::on_applied_transaction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_add_ram_correction(void * jarg1, unsigned int jarg2, long long jarg3, char * jarg4, unsigned long long jarg5, unsigned long long jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  std::string arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  (arg1)->on_add_ram_correction(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_add_ram_correctionSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, long long jarg3, char * jarg4, unsigned long long jarg5, unsigned long long jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  std::string arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  (arg1)->swig_logger_base::on_add_ram_correction(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_input_action(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->on_input_action(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_input_actionSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->swig_logger_base::on_input_action(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_require_recipient(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->on_require_recipient(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_require_recipientSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->swig_logger_base::on_require_recipient(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_send_inline(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->on_send_inline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_send_inlineSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->swig_logger_base::on_send_inline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_send_context_free_inline(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->on_send_context_free_inline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_send_context_free_inlineSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->swig_logger_base::on_send_context_free_inline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_cancel_deferred(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned long long jarg4, void * jarg5, unsigned long long jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  SwigValueWrapper< swig_data_wrapper > arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  SwigValueWrapper< swig_data_wrapper > arg10 ;
  SwigValueWrapper< swig_data_wrapper > arg11 ;
  swig_data_wrapper *argp5 ;
  swig_data_wrapper *argp10 ;
  swig_data_wrapper *argp11 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  argp5 = (swig_data_wrapper *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint32_t)jarg7; 
  arg8 = (uint32_t)jarg8; 
  arg9 = (uint32_t)jarg9; 
  argp10 = (swig_data_wrapper *)jarg10; 
  if (!argp10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg10 = *argp10; 
  argp11 = (swig_data_wrapper *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg11 = *argp11; 
  (arg1)->on_cancel_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_cancel_deferredSwigExplicitSwigLoggerBase(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned long long jarg4, void * jarg5, unsigned long long jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  SwigValueWrapper< swig_data_wrapper > arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  SwigValueWrapper< swig_data_wrapper > arg10 ;
  SwigValueWrapper< swig_data_wrapper > arg11 ;
  swig_data_wrapper *argp5 ;
  swig_data_wrapper *argp10 ;
  swig_data_wrapper *argp11 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  argp5 = (swig_data_wrapper *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint32_t)jarg7; 
  arg8 = (uint32_t)jarg8; 
  arg9 = (uint32_t)jarg9; 
  argp10 = (swig_data_wrapper *)jarg10; 
  if (!argp10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg10 = *argp10; 
  argp11 = (swig_data_wrapper *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg11 = *argp11; 
  (arg1)->swig_logger_base::on_cancel_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_send_deferred(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned long long jarg4, void * jarg5, unsigned long long jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  SwigValueWrapper< swig_data_wrapper > arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  SwigValueWrapper< swig_data_wrapper > arg10 ;
  SwigValueWrapper< swig_data_wrapper > arg11 ;
  swig_data_wrapper *argp5 ;
  swig_data_wrapper *argp10 ;
  swig_data_wrapper *argp11 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  argp5 = (swig_data_wrapper *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint32_t)jarg7; 
  arg8 = (uint32_t)jarg8; 
  arg9 = (uint32_t)jarg9; 
  argp10 = (swig_data_wrapper *)jarg10; 
  if (!argp10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg10 = *argp10; 
  argp11 = (swig_data_wrapper *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg11 = *argp11; 
  (arg1)->on_send_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_send_deferredSwigExplicitSwigLoggerBase(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned long long jarg4, void * jarg5, unsigned long long jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  SwigValueWrapper< swig_data_wrapper > arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  SwigValueWrapper< swig_data_wrapper > arg10 ;
  SwigValueWrapper< swig_data_wrapper > arg11 ;
  swig_data_wrapper *argp5 ;
  swig_data_wrapper *argp10 ;
  swig_data_wrapper *argp11 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  argp5 = (swig_data_wrapper *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint32_t)jarg7; 
  arg8 = (uint32_t)jarg8; 
  arg9 = (uint32_t)jarg9; 
  argp10 = (swig_data_wrapper *)jarg10; 
  if (!argp10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg10 = *argp10; 
  argp11 = (swig_data_wrapper *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg11 = *argp11; 
  (arg1)->swig_logger_base::on_send_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_create_deferred(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned long long jarg4, void * jarg5, unsigned long long jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  SwigValueWrapper< swig_data_wrapper > arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  SwigValueWrapper< swig_data_wrapper > arg10 ;
  SwigValueWrapper< swig_data_wrapper > arg11 ;
  swig_data_wrapper *argp5 ;
  swig_data_wrapper *argp10 ;
  swig_data_wrapper *argp11 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  argp5 = (swig_data_wrapper *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint32_t)jarg7; 
  arg8 = (uint32_t)jarg8; 
  arg9 = (uint32_t)jarg9; 
  argp10 = (swig_data_wrapper *)jarg10; 
  if (!argp10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg10 = *argp10; 
  argp11 = (swig_data_wrapper *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg11 = *argp11; 
  (arg1)->on_create_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_create_deferredSwigExplicitSwigLoggerBase(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned long long jarg4, void * jarg5, unsigned long long jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, void * jarg10, void * jarg11) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  SwigValueWrapper< swig_data_wrapper > arg5 ;
  uint64_t arg6 ;
  uint32_t arg7 ;
  uint32_t arg8 ;
  uint32_t arg9 ;
  SwigValueWrapper< swig_data_wrapper > arg10 ;
  SwigValueWrapper< swig_data_wrapper > arg11 ;
  swig_data_wrapper *argp5 ;
  swig_data_wrapper *argp10 ;
  swig_data_wrapper *argp11 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  argp5 = (swig_data_wrapper *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint32_t)jarg7; 
  arg8 = (uint32_t)jarg8; 
  arg9 = (uint32_t)jarg9; 
  argp10 = (swig_data_wrapper *)jarg10; 
  if (!argp10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg10 = *argp10; 
  argp11 = (swig_data_wrapper *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg11 = *argp11; 
  (arg1)->swig_logger_base::on_create_deferred(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_fail_deferred(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->on_fail_deferred(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_fail_deferredSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->swig_logger_base::on_fail_deferred(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_create_table(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  (arg1)->on_create_table(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_create_tableSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  (arg1)->swig_logger_base::on_create_table(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_remove_table(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  (arg1)->on_remove_table(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_remove_tableSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  (arg1)->swig_logger_base::on_remove_table(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_db_store_i64(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6, unsigned long long jarg7, void * jarg8) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  SwigValueWrapper< swig_data_wrapper > arg8 ;
  swig_data_wrapper *argp8 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint64_t)jarg7; 
  argp8 = (swig_data_wrapper *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->on_db_store_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_db_store_i64SwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6, unsigned long long jarg7, void * jarg8) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  SwigValueWrapper< swig_data_wrapper > arg8 ;
  swig_data_wrapper *argp8 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint64_t)jarg7; 
  argp8 = (swig_data_wrapper *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->swig_logger_base::on_db_store_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_db_update_i64(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6, unsigned long long jarg7, void * jarg8, void * jarg9) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  SwigValueWrapper< swig_data_wrapper > arg8 ;
  SwigValueWrapper< swig_data_wrapper > arg9 ;
  swig_data_wrapper *argp8 ;
  swig_data_wrapper *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint64_t)jarg7; 
  argp8 = (swig_data_wrapper *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (swig_data_wrapper *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg9 = *argp9; 
  (arg1)->on_db_update_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_db_update_i64SwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6, unsigned long long jarg7, void * jarg8, void * jarg9) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  SwigValueWrapper< swig_data_wrapper > arg8 ;
  SwigValueWrapper< swig_data_wrapper > arg9 ;
  swig_data_wrapper *argp8 ;
  swig_data_wrapper *argp9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint64_t)jarg7; 
  argp8 = (swig_data_wrapper *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (swig_data_wrapper *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg9 = *argp9; 
  (arg1)->swig_logger_base::on_db_update_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_db_remove_i64(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6, unsigned long long jarg7, void * jarg8) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  SwigValueWrapper< swig_data_wrapper > arg8 ;
  swig_data_wrapper *argp8 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint64_t)jarg7; 
  argp8 = (swig_data_wrapper *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->on_db_remove_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_db_remove_i64SwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, unsigned long long jarg3, unsigned long long jarg4, unsigned long long jarg5, unsigned long long jarg6, unsigned long long jarg7, void * jarg8) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  SwigValueWrapper< swig_data_wrapper > arg8 ;
  swig_data_wrapper *argp8 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  arg6 = (uint64_t)jarg6; 
  arg7 = (uint64_t)jarg7; 
  argp8 = (swig_data_wrapper *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->swig_logger_base::on_db_remove_i64(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_ram_event(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, unsigned long long jarg7, unsigned long long jarg8, long long jarg9) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  uint64_t arg7 ;
  uint64_t arg8 ;
  int64_t arg9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg5)->assign(jarg5); 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  arg7 = (uint64_t)jarg7; 
  arg8 = (uint64_t)jarg8; 
  arg9 = (int64_t)jarg9; 
  (arg1)->on_ram_event(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_ram_eventSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, unsigned long long jarg7, unsigned long long jarg8, long long jarg9) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  uint64_t arg7 ;
  uint64_t arg8 ;
  int64_t arg9 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg5)->assign(jarg5); 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  arg7 = (uint64_t)jarg7; 
  arg8 = (uint64_t)jarg8; 
  arg9 = (int64_t)jarg9; 
  (arg1)->swig_logger_base::on_ram_event(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_create_permission(void * jarg1, unsigned int jarg2, long long jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  SwigValueWrapper< swig_data_wrapper > arg4 ;
  swig_data_wrapper *argp4 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  argp4 = (swig_data_wrapper *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->on_create_permission(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_create_permissionSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, long long jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  SwigValueWrapper< swig_data_wrapper > arg4 ;
  swig_data_wrapper *argp4 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  argp4 = (swig_data_wrapper *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->swig_logger_base::on_create_permission(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_modify_permission(void * jarg1, unsigned int jarg2, long long jarg3, void * jarg4, void * jarg5) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  SwigValueWrapper< swig_data_wrapper > arg4 ;
  SwigValueWrapper< swig_data_wrapper > arg5 ;
  swig_data_wrapper *argp4 ;
  swig_data_wrapper *argp5 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  argp4 = (swig_data_wrapper *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (swig_data_wrapper *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->on_modify_permission(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_modify_permissionSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, long long jarg3, void * jarg4, void * jarg5) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  SwigValueWrapper< swig_data_wrapper > arg4 ;
  SwigValueWrapper< swig_data_wrapper > arg5 ;
  swig_data_wrapper *argp4 ;
  swig_data_wrapper *argp5 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  argp4 = (swig_data_wrapper *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (swig_data_wrapper *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->swig_logger_base::on_modify_permission(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_remove_permission(void * jarg1, unsigned int jarg2, long long jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  SwigValueWrapper< swig_data_wrapper > arg4 ;
  swig_data_wrapper *argp4 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  argp4 = (swig_data_wrapper *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->on_remove_permission(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_on_remove_permissionSwigExplicitSwigLoggerBase(void * jarg1, unsigned int jarg2, long long jarg3, void * jarg4) {
  swig_logger_base *arg1 = (swig_logger_base *) 0 ;
  uint32_t arg2 ;
  int64_t arg3 ;
  SwigValueWrapper< swig_data_wrapper > arg4 ;
  swig_data_wrapper *argp4 ;
  
  arg1 = (swig_logger_base *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  argp4 = (swig_data_wrapper *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null swig_data_wrapper", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->swig_logger_base::on_remove_permission(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SwigLoggerBase() {
  void * jresult ;
  swig_logger_base *result = 0 ;
  
  result = (swig_logger_base *)new SwigDirector_SwigLoggerBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwigLoggerBase_director_connect(void *objarg, SwigDirector_SwigLoggerBase::SWIG_Callback0_t callback0, SwigDirector_SwigLoggerBase::SWIG_Callback1_t callback1, SwigDirector_SwigLoggerBase::SWIG_Callback2_t callback2, SwigDirector_SwigLoggerBase::SWIG_Callback3_t callback3, SwigDirector_SwigLoggerBase::SWIG_Callback4_t callback4, SwigDirector_SwigLoggerBase::SWIG_Callback5_t callback5, SwigDirector_SwigLoggerBase::SWIG_Callback6_t callback6, SwigDirector_SwigLoggerBase::SWIG_Callback7_t callback7, SwigDirector_SwigLoggerBase::SWIG_Callback8_t callback8, SwigDirector_SwigLoggerBase::SWIG_Callback9_t callback9, SwigDirector_SwigLoggerBase::SWIG_Callback10_t callback10, SwigDirector_SwigLoggerBase::SWIG_Callback11_t callback11, SwigDirector_SwigLoggerBase::SWIG_Callback12_t callback12, SwigDirector_SwigLoggerBase::SWIG_Callback13_t callback13, SwigDirector_SwigLoggerBase::SWIG_Callback14_t callback14, SwigDirector_SwigLoggerBase::SWIG_Callback15_t callback15, SwigDirector_SwigLoggerBase::SWIG_Callback16_t callback16, SwigDirector_SwigLoggerBase::SWIG_Callback17_t callback17, SwigDirector_SwigLoggerBase::SWIG_Callback18_t callback18, SwigDirector_SwigLoggerBase::SWIG_Callback19_t callback19, SwigDirector_SwigLoggerBase::SWIG_Callback20_t callback20, SwigDirector_SwigLoggerBase::SWIG_Callback21_t callback21, SwigDirector_SwigLoggerBase::SWIG_Callback22_t callback22, SwigDirector_SwigLoggerBase::SWIG_Callback23_t callback23, SwigDirector_SwigLoggerBase::SWIG_Callback24_t callback24, SwigDirector_SwigLoggerBase::SWIG_Callback25_t callback25, SwigDirector_SwigLoggerBase::SWIG_Callback26_t callback26, SwigDirector_SwigLoggerBase::SWIG_Callback27_t callback27) {
  swig_logger_base *obj = (swig_logger_base *)objarg;
  SwigDirector_SwigLoggerBase *director = static_cast<SwigDirector_SwigLoggerBase *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NodeosSwig_Start(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  NodeosSwig *arg1 = (NodeosSwig *) 0 ;
  int arg2 ;
  std::vector< std::string > arg3 ;
  swig_logger_base *arg4 = (swig_logger_base *) 0 ;
  std::vector< std::string > *argp3 ;
  int result;
  
  arg1 = (NodeosSwig *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (std::vector< std::string > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< std::string >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (swig_logger_base *)jarg4; 
  result = (int)(arg1)->Start(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodeosSwig() {
  void * jresult ;
  NodeosSwig *result = 0 ;
  
  result = (NodeosSwig *)new NodeosSwig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NodeosSwig(void * jarg1) {
  NodeosSwig *arg1 = (NodeosSwig *) 0 ;
  
  arg1 = (NodeosSwig *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

