//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SwigLoggerBase : global::System.IDisposable
{
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;

    internal SwigLoggerBase(global::System.IntPtr cPtr, bool cMemoryOwn)
    {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }

    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigLoggerBase obj)
    {
        return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }

    ~SwigLoggerBase()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(true);
        global::System.GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        lock (this)
        {
            if (swigCPtr.Handle != global::System.IntPtr.Zero)
            {
                if (swigCMemOwn)
                {
                    swigCMemOwn = false;
                    NodeosSwigModulePINVOKE.delete_SwigLoggerBase(swigCPtr);
                }
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
            }
        }
    }

    public virtual void on_deep_mind_version(string name, uint major, uint minor)
    {
        if (SwigDerivedClassHasMethod("on_deep_mind_version", swigMethodTypes0)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_deep_mind_versionSwigExplicitSwigLoggerBase(swigCPtr, name, major, minor); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_deep_mind_version(swigCPtr, name, major, minor);
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_abidump_start(uint block_num, ulong global_sequence_num)
    {
        if (SwigDerivedClassHasMethod("on_abidump_start", swigMethodTypes1)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_abidump_startSwigExplicitSwigLoggerBase(swigCPtr, block_num, global_sequence_num); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_abidump_start(swigCPtr, block_num, global_sequence_num);
    }

    public virtual void on_abidump_abi(ulong name, global::System.IntPtr abi_data)
    {
        if (SwigDerivedClassHasMethod("on_abidump_abi", swigMethodTypes2)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_abidump_abiSwigExplicitSwigLoggerBase(swigCPtr, name, new global::System.Runtime.InteropServices.HandleRef(null,abi_data)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_abidump_abi(swigCPtr, name, new global::System.Runtime.InteropServices.HandleRef(null,abi_data));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_abidump_end()
    {
        if (SwigDerivedClassHasMethod("on_abidump_end", swigMethodTypes3)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_abidump_endSwigExplicitSwigLoggerBase(swigCPtr); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_abidump_end(swigCPtr);
    }

    public virtual void on_start_block(uint start_block)
    {
        if (SwigDerivedClassHasMethod("on_start_block", swigMethodTypes4)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_start_blockSwigExplicitSwigLoggerBase(swigCPtr, start_block); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_start_block(swigCPtr, start_block);
    }

    public virtual void on_accepted_block(uint num, global::System.IntPtr blk)
    {
        if (SwigDerivedClassHasMethod("on_accepted_block", swigMethodTypes5)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_accepted_blockSwigExplicitSwigLoggerBase(swigCPtr, num, new global::System.Runtime.InteropServices.HandleRef(null,blk)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_accepted_block(swigCPtr, num, new global::System.Runtime.InteropServices.HandleRef(null,blk));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_switch_forks(global::System.IntPtr from_id, global::System.IntPtr to_id)
    {
        if (SwigDerivedClassHasMethod("on_switch_forks", swigMethodTypes6)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_switch_forksSwigExplicitSwigLoggerBase(swigCPtr, new global::System.Runtime.InteropServices.HandleRef(null,from_id), new global::System.Runtime.InteropServices.HandleRef(null,to_id)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_switch_forks(swigCPtr, new global::System.Runtime.InteropServices.HandleRef(null,from_id), new global::System.Runtime.InteropServices.HandleRef(null,to_id));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_error(global::System.IntPtr id, global::System.IntPtr trx)
    {
        if (SwigDerivedClassHasMethod("on_error", swigMethodTypes7)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_errorSwigExplicitSwigLoggerBase(swigCPtr, new global::System.Runtime.InteropServices.HandleRef(null,id), new global::System.Runtime.InteropServices.HandleRef(null,trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_error(swigCPtr, new global::System.Runtime.InteropServices.HandleRef(null,id), new global::System.Runtime.InteropServices.HandleRef(null,trx));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_onblock(global::System.IntPtr id, global::System.IntPtr trx)
    {
        if (SwigDerivedClassHasMethod("on_onblock", swigMethodTypes8)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_onblockSwigExplicitSwigLoggerBase(swigCPtr, new global::System.Runtime.InteropServices.HandleRef(null,id), new global::System.Runtime.InteropServices.HandleRef(null,trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_onblock(swigCPtr, new global::System.Runtime.InteropServices.HandleRef(null,id), new global::System.Runtime.InteropServices.HandleRef(null,trx));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_applied_transaction(uint block_num, global::System.IntPtr traces)
    {
        if (SwigDerivedClassHasMethod("on_applied_transaction", swigMethodTypes9)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_applied_transactionSwigExplicitSwigLoggerBase(swigCPtr, block_num, new global::System.Runtime.InteropServices.HandleRef(null,traces)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_applied_transaction(swigCPtr, block_num, new global::System.Runtime.InteropServices.HandleRef(null,traces));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_add_ram_correction(uint action_id, long correction_id, string event_id, ulong payer, ulong delta)
    {
        if (SwigDerivedClassHasMethod("on_add_ram_correction", swigMethodTypes10)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_add_ram_correctionSwigExplicitSwigLoggerBase(swigCPtr, action_id, correction_id, event_id, payer, delta); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_add_ram_correction(swigCPtr, action_id, correction_id, event_id, payer, delta);
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_input_action(uint action_id)
    {
        if (SwigDerivedClassHasMethod("on_input_action", swigMethodTypes11)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_input_actionSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_input_action(swigCPtr, action_id);
    }

    public virtual void on_require_recipient(uint action_id)
    {
        if (SwigDerivedClassHasMethod("on_require_recipient", swigMethodTypes12)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_require_recipientSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_require_recipient(swigCPtr, action_id);
    }

    public virtual void on_send_inline(uint action_id)
    {
        if (SwigDerivedClassHasMethod("on_send_inline", swigMethodTypes13)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_send_inlineSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_send_inline(swigCPtr, action_id);
    }

    public virtual void on_send_context_free_inline(uint action_id)
    {
        if (SwigDerivedClassHasMethod("on_send_context_free_inline", swigMethodTypes14)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_send_context_free_inlineSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_send_context_free_inline(swigCPtr, action_id);
    }

    public virtual void on_cancel_deferred(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx)
    {
        if (SwigDerivedClassHasMethod("on_cancel_deferred", swigMethodTypes15)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_cancel_deferredSwigExplicitSwigLoggerBase(swigCPtr, qual, action_id, sender, new global::System.Runtime.InteropServices.HandleRef(null,sender_id), payer, published, delay, expiration, new global::System.Runtime.InteropServices.HandleRef(null,trx_id), new global::System.Runtime.InteropServices.HandleRef(null,trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_cancel_deferred(swigCPtr, qual, action_id, sender, new global::System.Runtime.InteropServices.HandleRef(null,sender_id), payer, published, delay, expiration, new global::System.Runtime.InteropServices.HandleRef(null,trx_id), new global::System.Runtime.InteropServices.HandleRef(null,trx));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_send_deferred(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx)
    {
        if (SwigDerivedClassHasMethod("on_send_deferred", swigMethodTypes16)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_send_deferredSwigExplicitSwigLoggerBase(swigCPtr, qual, action_id, sender, new global::System.Runtime.InteropServices.HandleRef(null,sender_id), payer, published, delay, expiration, new global::System.Runtime.InteropServices.HandleRef(null,trx_id), new global::System.Runtime.InteropServices.HandleRef(null,trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_send_deferred(swigCPtr, qual, action_id, sender, new global::System.Runtime.InteropServices.HandleRef(null,sender_id), payer, published, delay, expiration, new global::System.Runtime.InteropServices.HandleRef(null,trx_id), new global::System.Runtime.InteropServices.HandleRef(null,trx));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_create_deferred(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx)
    {
        if (SwigDerivedClassHasMethod("on_create_deferred", swigMethodTypes17)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_create_deferredSwigExplicitSwigLoggerBase(swigCPtr, qual, action_id, sender, new global::System.Runtime.InteropServices.HandleRef(null,sender_id), payer, published, delay, expiration, new global::System.Runtime.InteropServices.HandleRef(null,trx_id), new global::System.Runtime.InteropServices.HandleRef(null,trx)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_create_deferred(swigCPtr, qual, action_id, sender, new global::System.Runtime.InteropServices.HandleRef(null,sender_id), payer, published, delay, expiration, new global::System.Runtime.InteropServices.HandleRef(null,trx_id), new global::System.Runtime.InteropServices.HandleRef(null,trx));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_fail_deferred(uint action_id)
    {
        if (SwigDerivedClassHasMethod("on_fail_deferred", swigMethodTypes18)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_fail_deferredSwigExplicitSwigLoggerBase(swigCPtr, action_id); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_fail_deferred(swigCPtr, action_id);
    }

    public virtual void on_create_table(uint action_id, ulong code, ulong scope, ulong table, ulong payer)
    {
        if (SwigDerivedClassHasMethod("on_create_table", swigMethodTypes19)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_create_tableSwigExplicitSwigLoggerBase(swigCPtr, action_id, code, scope, table, payer); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_create_table(swigCPtr, action_id, code, scope, table, payer);
    }

    public virtual void on_remove_table(uint action_id, ulong code, ulong scope, ulong table, ulong payer)
    {
        if (SwigDerivedClassHasMethod("on_remove_table", swigMethodTypes20)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_remove_tableSwigExplicitSwigLoggerBase(swigCPtr, action_id, code, scope, table, payer); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_remove_table(swigCPtr, action_id, code, scope, table, payer);
    }

    public virtual void on_db_store_i64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr ndata)
    {
        if (SwigDerivedClassHasMethod("on_db_store_i64", swigMethodTypes21)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_db_store_i64SwigExplicitSwigLoggerBase(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, new global::System.Runtime.InteropServices.HandleRef(null,ndata)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_db_store_i64(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, new global::System.Runtime.InteropServices.HandleRef(null,ndata));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_db_update_i64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata, global::System.IntPtr ndata)
    {
        if (SwigDerivedClassHasMethod("on_db_update_i64", swigMethodTypes22)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_db_update_i64SwigExplicitSwigLoggerBase(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, new global::System.Runtime.InteropServices.HandleRef(null,odata), new global::System.Runtime.InteropServices.HandleRef(null,ndata)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_db_update_i64(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, new global::System.Runtime.InteropServices.HandleRef(null,odata), new global::System.Runtime.InteropServices.HandleRef(null,ndata));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_db_remove_i64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata)
    {
        if (SwigDerivedClassHasMethod("on_db_remove_i64", swigMethodTypes23)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_db_remove_i64SwigExplicitSwigLoggerBase(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, new global::System.Runtime.InteropServices.HandleRef(null,odata)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_db_remove_i64(swigCPtr, action_id, payer, table_code, scope, table_name, primkey, new global::System.Runtime.InteropServices.HandleRef(null,odata));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_ram_event(uint action_id, string event_id, string family, string operation, string legacy_tag, ulong payer, ulong new_usage, long delta)
    {
        if (SwigDerivedClassHasMethod("on_ram_event", swigMethodTypes24)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_ram_eventSwigExplicitSwigLoggerBase(swigCPtr, action_id, event_id, family, operation, legacy_tag, payer, new_usage, delta); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_ram_event(swigCPtr, action_id, event_id, family, operation, legacy_tag, payer, new_usage, delta);
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_create_permission(uint action_id, long permission_id, global::System.IntPtr data)
    {
        if (SwigDerivedClassHasMethod("on_create_permission", swigMethodTypes25)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_create_permissionSwigExplicitSwigLoggerBase(swigCPtr, action_id, permission_id, new global::System.Runtime.InteropServices.HandleRef(null,data)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_create_permission(swigCPtr, action_id, permission_id, new global::System.Runtime.InteropServices.HandleRef(null,data));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_modify_permission(uint action_id, long permission_id, global::System.IntPtr opdata, global::System.IntPtr npdata)
    {
        if (SwigDerivedClassHasMethod("on_modify_permission", swigMethodTypes26)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_modify_permissionSwigExplicitSwigLoggerBase(swigCPtr, action_id, permission_id, new global::System.Runtime.InteropServices.HandleRef(null,opdata), new global::System.Runtime.InteropServices.HandleRef(null,npdata)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_modify_permission(swigCPtr, action_id, permission_id, new global::System.Runtime.InteropServices.HandleRef(null,opdata), new global::System.Runtime.InteropServices.HandleRef(null,npdata));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public virtual void on_remove_permission(uint action_id, long permission_id, global::System.IntPtr data)
    {
        if (SwigDerivedClassHasMethod("on_remove_permission", swigMethodTypes27)) NodeosSwigModulePINVOKE.SwigLoggerBase_on_remove_permissionSwigExplicitSwigLoggerBase(swigCPtr, action_id, permission_id, new global::System.Runtime.InteropServices.HandleRef(null,data)); else NodeosSwigModulePINVOKE.SwigLoggerBase_on_remove_permission(swigCPtr, action_id, permission_id, new global::System.Runtime.InteropServices.HandleRef(null,data));
        if (NodeosSwigModulePINVOKE.SWIGPendingException.Pending) throw NodeosSwigModulePINVOKE.SWIGPendingException.Retrieve();
    }

    public SwigLoggerBase() : this(NodeosSwigModulePINVOKE.new_SwigLoggerBase(), true)
    {
        SwigDirectorConnect();
    }

    private void SwigDirectorConnect()
    {
        if (SwigDerivedClassHasMethod("on_deep_mind_version", swigMethodTypes0))
            swigDelegate0 = new SwigDelegateSwigLoggerBase_0(SwigDirectorMethodon_deep_mind_version);
        if (SwigDerivedClassHasMethod("on_abidump_start", swigMethodTypes1))
            swigDelegate1 = new SwigDelegateSwigLoggerBase_1(SwigDirectorMethodon_abidump_start);
        if (SwigDerivedClassHasMethod("on_abidump_abi", swigMethodTypes2))
            swigDelegate2 = new SwigDelegateSwigLoggerBase_2(SwigDirectorMethodon_abidump_abi);
        if (SwigDerivedClassHasMethod("on_abidump_end", swigMethodTypes3))
            swigDelegate3 = new SwigDelegateSwigLoggerBase_3(SwigDirectorMethodon_abidump_end);
        if (SwigDerivedClassHasMethod("on_start_block", swigMethodTypes4))
            swigDelegate4 = new SwigDelegateSwigLoggerBase_4(SwigDirectorMethodon_start_block);
        if (SwigDerivedClassHasMethod("on_accepted_block", swigMethodTypes5))
            swigDelegate5 = new SwigDelegateSwigLoggerBase_5(SwigDirectorMethodon_accepted_block);
        if (SwigDerivedClassHasMethod("on_switch_forks", swigMethodTypes6))
            swigDelegate6 = new SwigDelegateSwigLoggerBase_6(SwigDirectorMethodon_switch_forks);
        if (SwigDerivedClassHasMethod("on_error", swigMethodTypes7))
            swigDelegate7 = new SwigDelegateSwigLoggerBase_7(SwigDirectorMethodon_error);
        if (SwigDerivedClassHasMethod("on_onblock", swigMethodTypes8))
            swigDelegate8 = new SwigDelegateSwigLoggerBase_8(SwigDirectorMethodon_onblock);
        if (SwigDerivedClassHasMethod("on_applied_transaction", swigMethodTypes9))
            swigDelegate9 = new SwigDelegateSwigLoggerBase_9(SwigDirectorMethodon_applied_transaction);
        if (SwigDerivedClassHasMethod("on_add_ram_correction", swigMethodTypes10))
            swigDelegate10 = new SwigDelegateSwigLoggerBase_10(SwigDirectorMethodon_add_ram_correction);
        if (SwigDerivedClassHasMethod("on_input_action", swigMethodTypes11))
            swigDelegate11 = new SwigDelegateSwigLoggerBase_11(SwigDirectorMethodon_input_action);
        if (SwigDerivedClassHasMethod("on_require_recipient", swigMethodTypes12))
            swigDelegate12 = new SwigDelegateSwigLoggerBase_12(SwigDirectorMethodon_require_recipient);
        if (SwigDerivedClassHasMethod("on_send_inline", swigMethodTypes13))
            swigDelegate13 = new SwigDelegateSwigLoggerBase_13(SwigDirectorMethodon_send_inline);
        if (SwigDerivedClassHasMethod("on_send_context_free_inline", swigMethodTypes14))
            swigDelegate14 = new SwigDelegateSwigLoggerBase_14(SwigDirectorMethodon_send_context_free_inline);
        if (SwigDerivedClassHasMethod("on_cancel_deferred", swigMethodTypes15))
            swigDelegate15 = new SwigDelegateSwigLoggerBase_15(SwigDirectorMethodon_cancel_deferred);
        if (SwigDerivedClassHasMethod("on_send_deferred", swigMethodTypes16))
            swigDelegate16 = new SwigDelegateSwigLoggerBase_16(SwigDirectorMethodon_send_deferred);
        if (SwigDerivedClassHasMethod("on_create_deferred", swigMethodTypes17))
            swigDelegate17 = new SwigDelegateSwigLoggerBase_17(SwigDirectorMethodon_create_deferred);
        if (SwigDerivedClassHasMethod("on_fail_deferred", swigMethodTypes18))
            swigDelegate18 = new SwigDelegateSwigLoggerBase_18(SwigDirectorMethodon_fail_deferred);
        if (SwigDerivedClassHasMethod("on_create_table", swigMethodTypes19))
            swigDelegate19 = new SwigDelegateSwigLoggerBase_19(SwigDirectorMethodon_create_table);
        if (SwigDerivedClassHasMethod("on_remove_table", swigMethodTypes20))
            swigDelegate20 = new SwigDelegateSwigLoggerBase_20(SwigDirectorMethodon_remove_table);
        if (SwigDerivedClassHasMethod("on_db_store_i64", swigMethodTypes21))
            swigDelegate21 = new SwigDelegateSwigLoggerBase_21(SwigDirectorMethodon_db_store_i64);
        if (SwigDerivedClassHasMethod("on_db_update_i64", swigMethodTypes22))
            swigDelegate22 = new SwigDelegateSwigLoggerBase_22(SwigDirectorMethodon_db_update_i64);
        if (SwigDerivedClassHasMethod("on_db_remove_i64", swigMethodTypes23))
            swigDelegate23 = new SwigDelegateSwigLoggerBase_23(SwigDirectorMethodon_db_remove_i64);
        if (SwigDerivedClassHasMethod("on_ram_event", swigMethodTypes24))
            swigDelegate24 = new SwigDelegateSwigLoggerBase_24(SwigDirectorMethodon_ram_event);
        if (SwigDerivedClassHasMethod("on_create_permission", swigMethodTypes25))
            swigDelegate25 = new SwigDelegateSwigLoggerBase_25(SwigDirectorMethodon_create_permission);
        if (SwigDerivedClassHasMethod("on_modify_permission", swigMethodTypes26))
            swigDelegate26 = new SwigDelegateSwigLoggerBase_26(SwigDirectorMethodon_modify_permission);
        if (SwigDerivedClassHasMethod("on_remove_permission", swigMethodTypes27))
            swigDelegate27 = new SwigDelegateSwigLoggerBase_27(SwigDirectorMethodon_remove_permission);
        NodeosSwigModulePINVOKE.SwigLoggerBase_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25, swigDelegate26, swigDelegate27);
    }

    private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes)
    {
        global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
        bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(SwigLoggerBase));
        return hasDerivedMethod;
    }

    private void SwigDirectorMethodon_deep_mind_version(string name, uint major, uint minor)
    {
        on_deep_mind_version(name, major, minor);
    }

    private void SwigDirectorMethodon_abidump_start(uint block_num, ulong global_sequence_num)
    {
        on_abidump_start(block_num, global_sequence_num);
    }

    private void SwigDirectorMethodon_abidump_abi(ulong name, global::System.IntPtr abi_data)
    {
        on_abidump_abi(name, abi_data);
    }

    private void SwigDirectorMethodon_abidump_end()
    {
        on_abidump_end();
    }

    private void SwigDirectorMethodon_start_block(uint start_block)
    {
        on_start_block(start_block);
    }

    private void SwigDirectorMethodon_accepted_block(uint num, global::System.IntPtr blk)
    {
        on_accepted_block(num, blk);
    }

    private void SwigDirectorMethodon_switch_forks(global::System.IntPtr from_id, global::System.IntPtr to_id)
    {
        on_switch_forks(from_id, to_id);
    }

    private void SwigDirectorMethodon_error(global::System.IntPtr id, global::System.IntPtr trx)
    {
        on_error(id, trx);
    }

    private void SwigDirectorMethodon_onblock(global::System.IntPtr id, global::System.IntPtr trx)
    {
        on_onblock(id, trx);
    }

    private void SwigDirectorMethodon_applied_transaction(uint block_num, global::System.IntPtr traces)
    {
        on_applied_transaction(block_num, traces);
    }

    private void SwigDirectorMethodon_add_ram_correction(uint action_id, long correction_id, string event_id, ulong payer, ulong delta)
    {
        on_add_ram_correction(action_id, correction_id, event_id, payer, delta);
    }

    private void SwigDirectorMethodon_input_action(uint action_id)
    {
        on_input_action(action_id);
    }

    private void SwigDirectorMethodon_require_recipient(uint action_id)
    {
        on_require_recipient(action_id);
    }

    private void SwigDirectorMethodon_send_inline(uint action_id)
    {
        on_send_inline(action_id);
    }

    private void SwigDirectorMethodon_send_context_free_inline(uint action_id)
    {
        on_send_context_free_inline(action_id);
    }

    private void SwigDirectorMethodon_cancel_deferred(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx)
    {
        on_cancel_deferred(qual, action_id, sender, sender_id, payer, published, delay, expiration, trx_id, trx);
    }

    private void SwigDirectorMethodon_send_deferred(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx)
    {
        on_send_deferred(qual, action_id, sender, sender_id, payer, published, delay, expiration, trx_id, trx);
    }

    private void SwigDirectorMethodon_create_deferred(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx)
    {
        on_create_deferred(qual, action_id, sender, sender_id, payer, published, delay, expiration, trx_id, trx);
    }

    private void SwigDirectorMethodon_fail_deferred(uint action_id)
    {
        on_fail_deferred(action_id);
    }

    private void SwigDirectorMethodon_create_table(uint action_id, ulong code, ulong scope, ulong table, ulong payer)
    {
        on_create_table(action_id, code, scope, table, payer);
    }

    private void SwigDirectorMethodon_remove_table(uint action_id, ulong code, ulong scope, ulong table, ulong payer)
    {
        on_remove_table(action_id, code, scope, table, payer);
    }

    private void SwigDirectorMethodon_db_store_i64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr ndata)
    {
        on_db_store_i64(action_id, payer, table_code, scope, table_name, primkey, ndata);
    }

    private void SwigDirectorMethodon_db_update_i64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata, global::System.IntPtr ndata)
    {
        on_db_update_i64(action_id, payer, table_code, scope, table_name, primkey, odata, ndata);
    }

    private void SwigDirectorMethodon_db_remove_i64(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata)
    {
        on_db_remove_i64(action_id, payer, table_code, scope, table_name, primkey, odata);
    }

    private void SwigDirectorMethodon_ram_event(uint action_id, string event_id, string family, string operation, string legacy_tag, ulong payer, ulong new_usage, long delta)
    {
        on_ram_event(action_id, event_id, family, operation, legacy_tag, payer, new_usage, delta);
    }

    private void SwigDirectorMethodon_create_permission(uint action_id, long permission_id, global::System.IntPtr data)
    {
        on_create_permission(action_id, permission_id, data);
    }

    private void SwigDirectorMethodon_modify_permission(uint action_id, long permission_id, global::System.IntPtr opdata, global::System.IntPtr npdata)
    {
        on_modify_permission(action_id, permission_id, opdata, npdata);
    }

    private void SwigDirectorMethodon_remove_permission(uint action_id, long permission_id, global::System.IntPtr data)
    {
        on_remove_permission(action_id, permission_id, data);
    }

    public delegate void SwigDelegateSwigLoggerBase_0(string name, uint major, uint minor);
    public delegate void SwigDelegateSwigLoggerBase_1(uint block_num, ulong global_sequence_num);
    public delegate void SwigDelegateSwigLoggerBase_2(ulong name, global::System.IntPtr abi_data);
    public delegate void SwigDelegateSwigLoggerBase_3();
    public delegate void SwigDelegateSwigLoggerBase_4(uint start_block);
    public delegate void SwigDelegateSwigLoggerBase_5(uint num, global::System.IntPtr blk);
    public delegate void SwigDelegateSwigLoggerBase_6(global::System.IntPtr from_id, global::System.IntPtr to_id);
    public delegate void SwigDelegateSwigLoggerBase_7(global::System.IntPtr id, global::System.IntPtr trx);
    public delegate void SwigDelegateSwigLoggerBase_8(global::System.IntPtr id, global::System.IntPtr trx);
    public delegate void SwigDelegateSwigLoggerBase_9(uint block_num, global::System.IntPtr traces);
    public delegate void SwigDelegateSwigLoggerBase_10(uint action_id, long correction_id, string event_id, ulong payer, ulong delta);
    public delegate void SwigDelegateSwigLoggerBase_11(uint action_id);
    public delegate void SwigDelegateSwigLoggerBase_12(uint action_id);
    public delegate void SwigDelegateSwigLoggerBase_13(uint action_id);
    public delegate void SwigDelegateSwigLoggerBase_14(uint action_id);
    public delegate void SwigDelegateSwigLoggerBase_15(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx);
    public delegate void SwigDelegateSwigLoggerBase_16(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx);
    public delegate void SwigDelegateSwigLoggerBase_17(byte qual, uint action_id, ulong sender, global::System.IntPtr sender_id, ulong payer, uint published, uint delay, uint expiration, global::System.IntPtr trx_id, global::System.IntPtr trx);
    public delegate void SwigDelegateSwigLoggerBase_18(uint action_id);
    public delegate void SwigDelegateSwigLoggerBase_19(uint action_id, ulong code, ulong scope, ulong table, ulong payer);
    public delegate void SwigDelegateSwigLoggerBase_20(uint action_id, ulong code, ulong scope, ulong table, ulong payer);
    public delegate void SwigDelegateSwigLoggerBase_21(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr ndata);
    public delegate void SwigDelegateSwigLoggerBase_22(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata, global::System.IntPtr ndata);
    public delegate void SwigDelegateSwigLoggerBase_23(uint action_id, ulong payer, ulong table_code, ulong scope, ulong table_name, ulong primkey, global::System.IntPtr odata);
    public delegate void SwigDelegateSwigLoggerBase_24(uint action_id, string event_id, string family, string operation, string legacy_tag, ulong payer, ulong new_usage, long delta);
    public delegate void SwigDelegateSwigLoggerBase_25(uint action_id, long permission_id, global::System.IntPtr data);
    public delegate void SwigDelegateSwigLoggerBase_26(uint action_id, long permission_id, global::System.IntPtr opdata, global::System.IntPtr npdata);
    public delegate void SwigDelegateSwigLoggerBase_27(uint action_id, long permission_id, global::System.IntPtr data);

    private SwigDelegateSwigLoggerBase_0 swigDelegate0;
    private SwigDelegateSwigLoggerBase_1 swigDelegate1;
    private SwigDelegateSwigLoggerBase_2 swigDelegate2;
    private SwigDelegateSwigLoggerBase_3 swigDelegate3;
    private SwigDelegateSwigLoggerBase_4 swigDelegate4;
    private SwigDelegateSwigLoggerBase_5 swigDelegate5;
    private SwigDelegateSwigLoggerBase_6 swigDelegate6;
    private SwigDelegateSwigLoggerBase_7 swigDelegate7;
    private SwigDelegateSwigLoggerBase_8 swigDelegate8;
    private SwigDelegateSwigLoggerBase_9 swigDelegate9;
    private SwigDelegateSwigLoggerBase_10 swigDelegate10;
    private SwigDelegateSwigLoggerBase_11 swigDelegate11;
    private SwigDelegateSwigLoggerBase_12 swigDelegate12;
    private SwigDelegateSwigLoggerBase_13 swigDelegate13;
    private SwigDelegateSwigLoggerBase_14 swigDelegate14;
    private SwigDelegateSwigLoggerBase_15 swigDelegate15;
    private SwigDelegateSwigLoggerBase_16 swigDelegate16;
    private SwigDelegateSwigLoggerBase_17 swigDelegate17;
    private SwigDelegateSwigLoggerBase_18 swigDelegate18;
    private SwigDelegateSwigLoggerBase_19 swigDelegate19;
    private SwigDelegateSwigLoggerBase_20 swigDelegate20;
    private SwigDelegateSwigLoggerBase_21 swigDelegate21;
    private SwigDelegateSwigLoggerBase_22 swigDelegate22;
    private SwigDelegateSwigLoggerBase_23 swigDelegate23;
    private SwigDelegateSwigLoggerBase_24 swigDelegate24;
    private SwigDelegateSwigLoggerBase_25 swigDelegate25;
    private SwigDelegateSwigLoggerBase_26 swigDelegate26;
    private SwigDelegateSwigLoggerBase_27 swigDelegate27;

    private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string), typeof(uint), typeof(uint) };
    private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(uint), typeof(ulong) };
    private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(ulong), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { };
    private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(uint) };
    private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(uint), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(global::System.IntPtr), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(global::System.IntPtr), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(global::System.IntPtr), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(uint), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(uint), typeof(long), typeof(string), typeof(ulong), typeof(ulong) };
    private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(uint) };
    private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(uint) };
    private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(uint) };
    private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(uint) };
    private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(byte), typeof(uint), typeof(ulong), typeof(global::System.IntPtr), typeof(ulong), typeof(uint), typeof(uint), typeof(uint), typeof(global::System.IntPtr), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(byte), typeof(uint), typeof(ulong), typeof(global::System.IntPtr), typeof(ulong), typeof(uint), typeof(uint), typeof(uint), typeof(global::System.IntPtr), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(byte), typeof(uint), typeof(ulong), typeof(global::System.IntPtr), typeof(ulong), typeof(uint), typeof(uint), typeof(uint), typeof(global::System.IntPtr), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(uint) };
    private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong) };
    private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong) };
    private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes22 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(global::System.IntPtr), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes23 = new global::System.Type[] { typeof(uint), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(ulong), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes24 = new global::System.Type[] { typeof(uint), typeof(string), typeof(string), typeof(string), typeof(string), typeof(ulong), typeof(ulong), typeof(long) };
    private static global::System.Type[] swigMethodTypes25 = new global::System.Type[] { typeof(uint), typeof(long), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes26 = new global::System.Type[] { typeof(uint), typeof(long), typeof(global::System.IntPtr), typeof(global::System.IntPtr) };
    private static global::System.Type[] swigMethodTypes27 = new global::System.Type[] { typeof(uint), typeof(long), typeof(global::System.IntPtr) };
}
